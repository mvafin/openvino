// Copyright (C) 2018-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <vector>

// clang-format off
#ifdef ${BACKEND_NAME}_FLOAT_TOLERANCE_BITS
#define DEFAULT_FLOAT_TOLERANCE_BITS ${BACKEND_NAME}_FLOAT_TOLERANCE_BITS
#endif
#ifdef ${BACKEND_NAME}_DOUBLE_TOLERANCE_BITS
#define DEFAULT_DOUBLE_TOLERANCE_BITS ${BACKEND_NAME}_DOUBLE_TOLERANCE_BITS
#endif
// clang-format on

#include "onnx_import/onnx.hpp"
#include "default_opset.hpp"
#include "engines_util/test_case.hpp"
#include "engines_util/test_engines.hpp"
#include "util/test_control.hpp"

NGRAPH_SUPPRESS_DEPRECATED_START

using namespace ngraph;

static std::string s_manifest = "${MANIFEST}";

using Inputs = std::vector<std::vector<float>>;
using Outputs = std::vector<std::vector<float>>;

using TestEngine = test::ENGINE_CLASS_NAME(${BACKEND_NAME});

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_bias_gelu) {
    const auto function = onnx_import::import_onnx_model(file_util::path_join(SERIALIZED_ZOO, "onnx/bias_gelu.onnx"));

    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<float>({0.5488135,
                                0.71518934,
                                0.60276335,
                                0.5448832,
                                0.4236548,
                                0.6458941,
                                0.4375872,
                                0.891773,
                                0.96366274,
                                0.3834415});
    test_case.add_input<float>({0.79172504, 0.5288949, 0.56804454, 0.92559665, 0.07103606});
    test_case.add_expected_output<float>(
        {1.2198428, 1.1112978, 1.0293297, 1.366493, 0.3411342, 1.329408, 0.8051748, 1.354462, 1.8336612, 0.3068893});
    test_case.run();
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_skip_layer_normalization_with_gamma_beta_bias) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/skip_layer_normalization_with_gamma_beta_bias.onnx"));

    std::vector<float> input = {
        0.54881352, 0.71518934, 0.60276335, 0.54488319, 0.42365479, 0.64589411, 0.43758720, 0.89177299,
        0.96366274, 0.38344151, 0.79172504, 0.52889490, 0.56804454, 0.92559665, 0.07103606, 0.08712930,
        0.02021840, 0.83261985, 0.77815676, 0.87001216, 0.97861832, 0.79915857, 0.46147937, 0.78052920,
    };
    std::vector<float> skip = {
        0.11827443, 0.63992101, 0.14335328, 0.94466889, 0.52184832, 0.41466194, 0.26455560, 0.77423370,
        0.45615032, 0.56843394, 0.01878980, 0.61763549, 0.61209571, 0.61693400, 0.94374806, 0.68182027,
        0.35950789, 0.43703195, 0.69763118, 0.06022547, 0.66676670, 0.67063785, 0.21038257, 0.12892629,
    };
    std::vector<float> expected = {
        -0.19721794, -0.42944565, 0.18620640, 0.61282152,  -0.11097327, -0.59518522, 0.13393641,  0.66901535,
        0.04256713,  -0.71902490, 0.23107991, 0.17300847,  -0.04390603, -0.31109563, 0.51021838,  -0.66914201,
        -0.20009395, -0.43313017, 0.67281967, -0.01712347, 0.09767530,  -0.43024653, -0.01836969, -0.29238200,
    };
    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<float>(input);
    test_case.add_input<float>(skip);
    test_case.add_expected_output<float>(expected);
    test_case.run_with_tolerance_as_fp();
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_skip_layer_normalization_with_gamma_beta) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/skip_layer_normalization_with_gamma_beta.onnx"));

    std::vector<float> input = {
        0.54881352, 0.71518934, 0.60276335, 0.54488319, 0.42365479, 0.64589411, 0.43758720, 0.89177299,
        0.96366274, 0.38344151, 0.79172504, 0.52889490, 0.56804454, 0.92559665, 0.07103606, 0.08712930,
        0.02021840, 0.83261985, 0.77815676, 0.87001216, 0.97861832, 0.79915857, 0.46147937, 0.78052920,
    };
    std::vector<float> skip = {
        0.11827443, 0.63992101, 0.14335328, 0.94466889, 0.52184832, 0.41466194, 0.26455560, 0.77423370,
        0.45615032, 0.56843394, 0.01878980, 0.61763549, 0.61209571, 0.61693400, 0.94374806, 0.68182027,
        0.35950789, 0.43703195, 0.69763118, 0.06022547, 0.66676670, 0.67063785, 0.21038257, 0.12892629,
    };
    std::vector<float> expected = {
        -0.17974678, -0.23946194, -0.04376268, 0.46959469,  -0.11171167, -0.41859278, -0.11082965, 0.64513868,
        0.07773457,  -0.51403606, -0.13661698, 0.11262375,  -0.05096011, -0.10416907, 0.10070466,  -0.50876135,
        -0.22290939, -0.27663514, 0.55416691,  -0.08064821, 0.04857478,  -0.25121087, -0.15912610, -0.26637587,
    };
    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<float>(input);
    test_case.add_input<float>(skip);
    test_case.add_expected_output<float>(expected);
    test_case.run_with_tolerance_as_fp();
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_skip_layer_normalization_with_gamma) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/skip_layer_normalization_with_gamma.onnx"));

    std::vector<float> input = {
        0.54881352, 0.71518934, 0.60276335, 0.54488319, 0.42365479, 0.64589411, 0.43758720, 0.89177299,
        0.96366274, 0.38344151, 0.79172504, 0.52889490, 0.56804454, 0.92559665, 0.07103606, 0.08712930,
        0.02021840, 0.83261985, 0.77815676, 0.87001216, 0.97861832, 0.79915857, 0.46147937, 0.78052920,
    };
    std::vector<float> skip = {
        0.11827443, 0.63992101, 0.14335328, 0.94466889, 0.52184832, 0.41466194, 0.26455560, 0.77423370,
        0.45615032, 0.56843394, 0.01878980, 0.61763549, 0.61209571, 0.61693400, 0.94374806, 0.68182027,
        0.35950789, 0.43703195, 0.69763118, 0.06022547, 0.66676670, 0.67063785, 0.21038257, 0.12892629,
    };
    std::vector<float> expected = {
        -0.10974677, 0.16053806,  -0.26376268, 0.46959469,  -0.04171166, -0.01859277, -0.33082965, 0.64513868,
        0.14773457,  -0.11403608, -0.35661697, 0.11262375,  0.01903989,  0.29583094,  -0.11929534, -0.50876135,
        -0.15290938, 0.12336487,  0.33416691,  -0.08064821, 0.11857478,  0.14878914,  -0.37912610, -0.26637587,
    };
    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<float>(input);
    test_case.add_input<float>(skip);
    test_case.add_expected_output<float>(expected);
    test_case.run_with_tolerance_as_fp();
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_skip_layer_normalization_dynamic_shapes) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/dynamic_shapes/skip_layer_normalization.onnx"));

    std::vector<float> input = {
        0.54881352, 0.71518934, 0.60276335, 0.54488319, 0.42365479, 0.64589411, 0.43758720, 0.89177299,
        0.96366274, 0.38344151, 0.79172504, 0.52889490, 0.56804454, 0.92559665, 0.07103606, 0.08712930,
        0.02021840, 0.83261985, 0.77815676, 0.87001216, 0.97861832, 0.79915857, 0.46147937, 0.78052920,
    };
    std::vector<float> skip = {
        0.11827443, 0.63992101, 0.14335328, 0.94466889, 0.52184832, 0.41466194, 0.26455560, 0.77423370,
        0.45615032, 0.56843394, 0.01878980, 0.61763549, 0.61209571, 0.61693400, 0.94374806, 0.68182027,
        0.35950789, 0.43703195, 0.69763118, 0.06022547, 0.66676670, 0.67063785, 0.21038257, 0.12892629,
    };
    std::vector<float> gamma = {
        0.31542835,
        0.36371076,
        0.57019675,
        0.43860152,
    };
    std::vector<float> beta = {
        0.98837382,
        0.10204481,
        0.20887676,
        0.16130951,
    };
    std::vector<float> bias = {
        0.65310830,
        0.25329161,
        0.46631077,
        0.24442559,
    };
    std::vector<float> expected = {
        0.76600611, 0.34308332,  -0.48470584, 0.71335256,  1.10028172, -0.13354334, -0.45232186, 0.79840088,
        1.52454257, -0.19450217, -0.13759643, 0.03988872,  1.27861762, 0.39529073,  0.12247884,  -0.52944231,
        0.64228040, 0.21059875,  1.05966032,  -0.14278713, 1.46366918, 0.21215858,  -0.31640187, -0.22832340,
    };

    auto test_case = test::TestCase<TestEngine, test::TestCaseType::DYNAMIC>(function);
    test_case.add_input<float>(Shape{3, 2, 4}, input);
    test_case.add_input<float>(Shape{3, 2, 4}, skip);
    test_case.add_input<float>(Shape{4}, gamma);
    test_case.add_input<float>(Shape{4}, beta);
    test_case.add_input<float>(Shape{4}, bias);
    test_case.add_expected_output<float>(Shape{3, 2, 4}, expected);
    test_case.run_with_tolerance_as_fp();
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_embed_layer_normalization) {
    const auto function =
        onnx_import::import_onnx_model(file_util::path_join(SERIALIZED_ZOO, "onnx/embed_layer_normalization.onnx"));

    std::vector<int> input_ids = {
        8, 1, 5, 9, 8, 9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9,
    };
    std::vector<float> expected_output = {
        -0.06615843, -0.18040463, 0.02199928,  0.01868065,  0.05397778,  -0.11761580, -0.09138932, -0.02506775,
        -0.02368510, -0.10373901, -0.05551499, -0.20972314, 0.01365213,  0.01132561,  -0.08603337, -0.08906764,
        0.09692993,  -0.04444099, -0.02037602, -0.03453060, -0.10214549, -0.13331436, -0.02665862, -0.01228805,
        -0.14232540, -0.07032782, 0.05511986,  -0.00120272, -0.04875736, -0.13051267, -0.05709254, 0.17854357,
        -0.01759873, -0.01819968, 0.07573269,  0.00557164,  0.06232717,  0.00530490,  -0.01565807, -0.14841977,
        -0.02299280, 0.02038561,  -0.00049481, 0.02575402,  0.10081697,  -0.12517214, -0.09316762, -0.00974943,
        -0.03093284, -0.06309240, -0.05551499, -0.20972314, 0.01365213,  0.01132561,  -0.08603337, -0.06176658,
        0.08304203,  -0.05025182, 0.00383657,  -0.02288112, -0.11407227, -0.01386134, -0.04411830, -0.00537948,
        0.00164397,  -0.03739140, 0.09941526,  0.00333974,  -0.04251949, -0.12992151, -0.09509478, -0.11811313,
        -0.03307065, -0.00866115, -0.15162414, 0.01106802,  0.06037656,  0.00035292,  -0.00223284, -0.11215645,
        -0.01390734, 0.07064321,  0.04028325,  -0.00290875, 0.12875907,  -0.12517214, -0.09316762, -0.00974943,
        -0.03093284, -0.06309240, -0.08723789, 0.03130914,  0.03131931,  -0.01526242, 0.20811458,  -0.05696163,
        0.16304255,  -0.02407495, -0.02955675, -0.03086288, -0.08130091, -0.05001551, -0.04875683, 0.00143666,
        -0.12153473, -0.00018507, 0.10957482,  -0.00416618, -0.01612359, -0.11605026, -0.08593204, 0.09055272,
        -0.03054028, -0.03603891, -0.08479506, -0.00034568, 0.03713699,  0.00163411,  -0.01738501, -0.18267182,
    };

    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<int>(input_ids);
    test_case.add_expected_output<float>(expected_output);
    test_case.run_with_tolerance_as_fp(1e-7f);
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_embed_layer_normalization_with_segment_embedding) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/embed_layer_normalization_with_segment_embedding.onnx"));

    std::vector<int> input_ids = {
        8, 1, 5, 9, 8, 9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9,
    };
    std::vector<int> segment_ids = {
        0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 1, 1, 1,
    };
    std::vector<float> expected_output = {
        -0.06044213, -0.14845914, 0.02457689,  0.02091519,  0.09514004,  -0.10280035, -0.02087995, -0.03323204,
        -0.02967127, -0.13447416, -0.05191760, -0.16518904, 0.02340531,  0.02176395,  0.04972410,  -0.07360736,
        0.12192874,  -0.04081530, -0.02338044, -0.05671440, -0.09475864, -0.08944942, -0.03362993, -0.01683486,
        -0.16770349, -0.07382569, 0.06230322,  0.02215859,  -0.05212611, -0.03934773, -0.04748865, 0.18134241,
        -0.01965741, -0.02202452, 0.01973994,  0.01575558,  0.04300199,  0.01436110,  -0.00198062, -0.09065692,
        -0.02923042, -0.00748686, 0.00717049,  0.02638642,  0.12174864,  -0.12973398, -0.11872391, -0.00549398,
        -0.02386289, -0.02210563, -0.03590920, -0.13728066, -0.01337939, 0.01538021,  -0.14687485, -0.05033565,
        0.03818212,  -0.04939338, 0.00961064,  -0.07407621, -0.09624685, 0.05594898,  -0.04948713, -0.01305631,
        -0.03779668, -0.01469170, 0.12346989,  0.02082030,  -0.03449103, -0.06029151, -0.09300473, -0.16308543,
        -0.02370042, 0.01066893,  -0.06523034, 0.00497636,  0.01933458,  -0.00900802, 0.00430878,  -0.13999483,
        -0.02377289, 0.01760014,  0.03896973,  0.00831112,  0.15634246,  -0.11109130, -0.11997811, -0.02304414,
        -0.01989413, -0.12763791, -0.05698400, 0.17125534,  0.00499324,  -0.02953288, 0.09178342,  -0.05001877,
        0.16157132,  -0.02312993, -0.02932195, -0.04914058, -0.07994118, -0.07199102, -0.04517454, 0.01249476,
        -0.07525793, -0.00207180, 0.03993115,  -0.01676321, -0.00214832, -0.16074482, -0.05012497, -0.00552153,
        -0.04302063, -0.00549224, -0.18399858, -0.00767871, -0.02209404, -0.01383207, -0.00082931, -0.19533031,
    };

    std::vector<int> expected_mask_index = {
        0,
        0,
        0,
    };

    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<int>(input_ids);
    test_case.add_input<int>(segment_ids);
    test_case.add_expected_output<float>(expected_output);
    test_case.add_expected_output<int>(expected_mask_index);
    test_case.run_with_tolerance_as_fp(1e-7);
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_embed_layer_normalization_with_segment_embedding_and_mask) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/embed_layer_normalization_with_segment_embedding_and_mask.onnx"));

    std::vector<int> input_ids = {
        8, 1, 5, 9, 8, 9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9,
    };
    std::vector<int> segment_ids = {
        0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 1, 1, 1,
    };
    std::vector<int> mask = {
        1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1,
    };
    std::vector<float> expected_output = {
        -0.06044213, -0.14845914, 0.02457689,  0.02091519,  0.09514004,  -0.10280035, -0.02087995, -0.03323204,
        -0.02967127, -0.13447416, -0.05191760, -0.16518904, 0.02340531,  0.02176395,  0.04972410,  -0.07360736,
        0.12192874,  -0.04081530, -0.02338044, -0.05671440, -0.09475864, -0.08944942, -0.03362993, -0.01683486,
        -0.16770349, -0.07382569, 0.06230322,  0.02215859,  -0.05212611, -0.03934773, -0.04748865, 0.18134241,
        -0.01965741, -0.02202452, 0.01973994,  0.01575558,  0.04300199,  0.01436110,  -0.00198062, -0.09065692,
        -0.02923042, -0.00748686, 0.00717049,  0.02638642,  0.12174864,  -0.12973398, -0.11872391, -0.00549398,
        -0.02386289, -0.02210563, -0.03590920, -0.13728066, -0.01337939, 0.01538021,  -0.14687485, -0.05033565,
        0.03818212,  -0.04939338, 0.00961064,  -0.07407621, -0.09624685, 0.05594898,  -0.04948713, -0.01305631,
        -0.03779668, -0.01469170, 0.12346989,  0.02082030,  -0.03449103, -0.06029151, -0.09300473, -0.16308543,
        -0.02370042, 0.01066893,  -0.06523034, 0.00497636,  0.01933458,  -0.00900802, 0.00430878,  -0.13999483,
        -0.02377289, 0.01760014,  0.03896973,  0.00831112,  0.15634246,  -0.11109130, -0.11997811, -0.02304414,
        -0.01989413, -0.12763791, -0.05698400, 0.17125534,  0.00499324,  -0.02953288, 0.09178342,  -0.05001877,
        0.16157132,  -0.02312993, -0.02932195, -0.04914058, -0.07994118, -0.07199102, -0.04517454, 0.01249476,
        -0.07525793, -0.00207180, 0.03993115,  -0.01676321, -0.00214832, -0.16074482, -0.05012497, -0.00552153,
        -0.04302063, -0.00549224, -0.18399858, -0.00767871, -0.02209404, -0.01383207, -0.00082931, -0.19533031,
    };
    std::vector<int> expected_mask_index = {
        5,
        3,
        4,
    };

    auto test_case = test::TestCase<TestEngine>(function);
    test_case.add_input<int>(input_ids);
    test_case.add_input<int>(segment_ids);
    test_case.add_input<int>(mask);
    test_case.add_expected_output<float>(expected_output);
    test_case.add_expected_output<int>(expected_mask_index);
    test_case.run_with_tolerance_as_fp(1e-7);
}

NGRAPH_TEST(${BACKEND_NAME}, onnx_model_embed_layer_normalization_dynamic_shapes) {
    const auto function = onnx_import::import_onnx_model(
        file_util::path_join(SERIALIZED_ZOO, "onnx/dynamic_shapes/embed_layer_normalization_dynamic_shapes.onnx"));

    std::vector<int> input_ids = {
        8, 1, 5, 9, 8, 9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9,
    };
    std::vector<int> segment_ids = {
        0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 0, 1, 1, 1,
    };
    std::vector<float> word_embeddings = {
        0.96980906, 0.65314001, 0.17090958, 0.35815218, 0.75068617, 0.60783064, 0.32504722, 0.03842543, 0.63427407,
        0.95894927, 0.65279031, 0.63505888, 0.99529958, 0.58185035, 0.41436860, 0.47469750, 0.62351012, 0.33800763,
        0.67475230, 0.31720173, 0.77834547, 0.94957107, 0.66252685, 0.01357164, 0.62284607, 0.67365962, 0.97194499,
        0.87819350, 0.50962436, 0.05571469, 0.45115921, 0.01998767, 0.44171092, 0.97958672, 0.35944447, 0.48089352,
        0.68866116, 0.88047588, 0.91823548, 0.21682213, 0.56518888, 0.86510259, 0.50896895, 0.91672295, 0.92115760,
        0.08311249, 0.27771857, 0.00935670, 0.84234208, 0.64717412,
    };
    std::vector<float> position_embeddings = {
        0.84138614, 0.26473016, 0.39782074, 0.55282146, 0.16494046, 0.36980811, 0.14644176, 0.56961840,
        0.70373726, 0.28847644, 0.43328807, 0.75610667, 0.39609829, 0.89603841, 0.63892108, 0.89155442,
        0.68005556, 0.44919774, 0.97857094, 0.11620191, 0.76702368, 0.41182014, 0.67543906, 0.24979627,
        0.31321833, 0.96541619, 0.58846509, 0.65966839, 0.53320622, 0.23053302, 0.39486930, 0.61880857,
        0.47486752, 0.47013220, 0.71607453, 0.28799102, 0.38346222, 0.74916983, 0.87845218, 0.10286336,
    };
    std::vector<float> segment_embeddings = {
        0.09237389,
        0.35404667,
        0.55181628,
        0.03362509,
        0.96896178,
        0.32099724,
        0.22126268,
        0.14126390,
        0.09725992,
        0.98404223,
        0.26034093,
        0.53702253,
        0.44792616,
        0.09956909,
        0.35231167,
    };
    std::vector<float> gamma = {
        0.46924916,
        0.84114015,
        0.90464777,
        0.03755938,
        0.50831544,
    };
    std::vector<float> beta = {
        0.16684751,
        0.77905101,
        0.86493331,
        0.41139671,
        0.13997258,
    };
    std::vector<int> mask = {
        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    };
    std::vector<float> expected_output = {
        -0.04089922, 0.35108989,  0.30442458,  0.39546335,  1.15422225,  0.10419128,  -0.19301927, 0.01070970,
        0.43977541,  0.89119899,  -0.51436460, 1.99256825,  1.41077507,  0.38642293,  0.17583044,  0.03320138,
        1.16508031,  -0.24356931, 0.47440714,  -0.17844005, 0.20463173,  1.90038323,  1.14138567,  0.34504607,
        0.16403235,  -0.24976699, 0.29362509,  0.34502214,  0.41751838,  1.09390712,  0.12354189,  1.83025289,
        1.05569196,  0.34413773,  0.35469764,  -0.69760042, 0.76338542,  1.75443077,  0.44126555,  0.18181801,
        0.73277575,  0.45443264,  0.17068321,  0.36591727,  0.72869974,  -0.56090516, 0.14415455,  1.47314119,
        0.42908576,  0.73084539,  -0.22373237, 2.26550221,  0.05606699,  0.39417523,  0.35234636,  0.78569502,
        0.77521765,  -0.65131050, 0.40168875,  0.45527256,  0.38715565,  0.98521245,  2.21446753,  0.36345237,
        -0.33269632, 0.36558092,  1.36846578,  1.37523413,  0.33698002,  0.28889543,  -0.40639281, 1.01643157,
        0.59668219,  0.39197800,  1.03101778,  0.02551098,  -0.03612846, -0.01371557, 0.43444607,  0.96746695,
        0.60583955,  -0.10362893, 0.40574494,  0.38046724,  0.87445319,  -0.00880148, -0.15437943, 0.08118075,
        0.44650543,  0.85956848,  -0.27865338, 2.10837507,  0.04798460,  0.43948367,  -0.10185169, 0.19978794,
        1.32323360,  1.20525467,  0.44288942,  -0.84200430, 0.52563053,  0.69949460,  0.73987913,  0.34668452,
        0.74545687,  0.57696682,  0.22452033,  -0.27099937, 0.39649010,  0.87083614,  -0.18965788, 0.58206403,
        -0.08108193, 0.42067638,  1.05117214,  -0.34287399, 0.20424896,  0.27994895,  0.46011117,  0.70890665,
    };
    std::vector<int> expected_mask_index = {
        6,
        5,
        5,
    };

    auto test_case = test::TestCase<TestEngine, test::TestCaseType::DYNAMIC>(function);
    test_case.add_input<int>(Shape{3, 8}, input_ids);
    test_case.add_input<int>(Shape{3, 8}, segment_ids);
    test_case.add_input<float>(Shape{10, 5}, word_embeddings);
    test_case.add_input<float>(Shape{8, 5}, position_embeddings);
    test_case.add_input<float>(Shape{3, 5}, segment_embeddings);
    test_case.add_input<float>(Shape{5}, gamma);
    test_case.add_input<float>(Shape{5}, beta);
    test_case.add_input<int>(Shape{3, 8}, mask);
    test_case.add_expected_output<float>(Shape{3, 8, 5}, expected_output);
    test_case.add_expected_output<int>(Shape{3}, expected_mask_index);
    test_case.run_with_tolerance_as_fp(1e-6);
}
